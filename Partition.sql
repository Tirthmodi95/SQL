CREATE DATABASE IF NOT EXISTS BIT_PARTITION;
USE BIT_PARTITION;

CREATE TABLE BIT_COURSE(
COURSE_NAME VARCHAR(50),
COURSE_ID INT(10),
COURSE_TITLE VARCHAR(60),
COURSE_DESC VARCHAR(60),
LAUNCH_DATE DATE,
COURSE_FEE INT,
COURSE_MENTOR VARCHAR(60),
COURSE_LAUNCH_YEAR INT);

SELECT * FROM BIT_COURSE;

INSERT INTO BIT_COURSE VALUES('MACHINE_LEARNING' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('AIOPS' , 101 , 'ML', "THIS IS AIOPS COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('DLCVNLP' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('AWS CLOUD' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('BLOCKCHAIN' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('RL' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('DL' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('INTERVIEW PREP' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('BIG DATA' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'SUDHANSHU',2020) ,
('DATA ANALYTICS' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FSDS' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('FSDA' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FABE' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('JAVA' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('MERN' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019); 

SELECT * FROM BIT_COURSE WHERE COURSE_LAUNCH_YEAR = 2020

-- DROP TABLE BIT_COURSES1
CREATE TABLE BIT_COURSES1(
COURSE_NAME VARCHAR(50),
COURSE_ID INT(10),
COURSE_TITLE VARCHAR(60),
COURSE_DESC VARCHAR(60),
LAUNCH_DATE DATE,
COURSE_FEE INT,
COURSE_MENTOR VARCHAR(60),
COURSE_LAUNCH_YEAR INT)
PARTITION BY RANGE(COURSE_LAUNCH_YEAR)(
PARTITION P0 VALUES LESS THAN (2019),
PARTITION P1 VALUES LESS THAN (2020),
PARTITION P2 VALUES LESS THAN (2021),
PARTITION P3 VALUES LESS THAN (2022),
PARTITION P4 VALUES LESS THAN (2023));

SELECT * FROM BIT_COURSES1;

INSERT INTO BIT_COURSES1 VALUES('MACHINE_LEARNING' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('AIOPS' , 101 , 'ML', "THIS IS AIOPS COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('DLCVNLP' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('AWS CLOUD' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('BLOCKCHAIN' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('RL' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('DL' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('INTERVIEW PREP' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('BIG DATA' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'SUDHANSHU',2020) ,
('DATA ANALYTICS' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FSDS' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('FSDA' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FABE' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('JAVA' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('MERN' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019); 

SELECT * FROM BIT_COURSES1 WHERE COURSE_LAUNCH_YEAR = 2020;

SELECT * FROM BIT_COURSE WHERE COURSE_LAUNCH_YEAR = 2020;

SELECT PARTITION_NAME , TABLE_NAME , TABLE_ROWS FROM
INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME = 'BIT_COURSES1'

CREATE TABLE BIT_COURSES2(
COURSE_NAME VARCHAR(50),
COURSE_ID INT(10),
COURSE_TITLE VARCHAR(60),
COURSE_DESC VARCHAR(60),
LAUNCH_DATE DATE,
COURSE_FEE INT,
COURSE_MENTOR VARCHAR(60),
COURSE_LAUNCH_YEAR INT)
PARTITION BY HASH(COURSE_LAUNCH_YEAR)
PARTITIONS 5;
SELECT * FROM BIT_COURSES2;
INSERT INTO BIT_COURSES2 VALUES('MACHINE_LEARNING' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('AIOPS' , 101 , 'ML', "THIS IS AIOPS COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('DLCVNLP' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('AWS CLOUD' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('BLOCKCHAIN' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('RL' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('DL' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('INTERVIEW PREP' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('BIG DATA' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'SUDHANSHU',2020) ,
('DATA ANALYTICS' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FSDS' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('FSDA' , 101 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FABE' , 101 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('JAVA' , 101 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('MERN' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019); 

SELECT PARTITION_NAME , TABLE_NAME , TABLE_ROWS FROM
INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME = 'BIT_COURSES2'

CREATE TABLE BIT_COURSES4(
COURSE_NAME VARCHAR(50),
COURSE_ID INT(10) PRIMARY KEY ,
COURSE_TITLE VARCHAR(60),
COURSE_DESC VARCHAR(80),
LAUNCH_DATE DATE,
COURSE_FEE INT,
COURSE_MENTOR VARCHAR(60),
COURSE_LAUNCH_YEAR INT)
PARTITION BY KEY()
PARTITIONS 10;

INSERT INTO BIT_COURSES4 VALUES('MACHINE_LEARNING' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('AIOPS' , 102 , 'ML', "THIS IS AIOPS COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('DLCVNLP' , 103 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('AWS CLOUD' , 104 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('BLOCKCHAIN' , 105 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('RL' , 106 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('DL' , 107 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('INTERVIEW PREP' , 108 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('BIG DATA' , 109 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'SUDHANSHU',2020) ,
('DATA ANALYTICS' , 110 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FSDS' , 111 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('FSDA' , 112 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FABE' , 113 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('JAVA' , 114 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('MERN' , 115 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019); 

SELECT PARTITION_NAME , TABLE_NAME , TABLE_ROWS FROM
INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME = 'BIT_COURSES4'

CREATE TABLE IF NOT EXISTS BIT_COURSES5(
COURSE_NAME VARCHAR(50),
COURSE_ID INT(10),
COURSE_TITLE VARCHAR(60),
COURSE_DESC VARCHAR(80),
LAUNCH_DATE DATE,
COURSE_FEE INT,
COURSE_MENTOR VARCHAR(60),
COURSE_LAUNCH_YEAR INT)
PARTITION BY RANGE COLUMNS(COURSE_NAME ,COURSE_LAUNCH_YEAR)
(
PARTITION P0 VALUES LESS THAN ('AIOPS',2019),
PARTITION P1 VALUES LESS THAN ('FSDS',2021),
PARTITION P2 VALUES LESS THAN ('MERN',2022)
);
INSERT IGNORE INTO BIT_COURSES5 VALUES('MACHINE_LEARNING' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('AIOPS' , 102 , 'ML', "THIS IS AIOPS COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('DLCVNLP' , 103 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('AWS CLOUD' , 104 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('BLOCKCHAIN' , 105 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('RL' , 106 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('DL' , 107 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('INTERVIEW PREP' , 108 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('BIG DATA' , 109 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'SUDHANSHU',2020) ,
('DATA ANALYTICS' , 110 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FSDS' , 111 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('FSDA' , 112 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FABE' , 113 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('JAVA' , 114 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('MERN' , 115 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019); 

SELECT * FROM BIT_COURSES5;

CREATE TABLE BIT_COURSES6(
COURSE_NAME VARCHAR(50),
COURSE_ID INT(10),
COURSE_TITLE VARCHAR(60),
COURSE_DESC VARCHAR(80),
LAUNCH_DATE DATE,
COURSE_FEE INT,
COURSE_MENTOR VARCHAR(60),
COURSE_LAUNCH_YEAR INT)
PARTITION BY RANGE (COURSE_LAUNCH_YEAR)
SUBPARTITION BY HASH(COURSE_LAUNCH_YEAR)
SUBPARTITIONS 5 (
PARTITION P0 VALUES LESS THAN (2019),
PARTITION P1 VALUES LESS THAN (2020),
PARTITION P2 VALUES LESS THAN (2021),
PARTITION P3 VALUES LESS THAN (2022));

INSERT IGNORE INTO BIT_COURSES6 VALUES('MACHINE_LEARNING' , 101 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('AIOPS' , 102 , 'ML', "THIS IS AIOPS COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('DLCVNLP' , 103 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('AWS CLOUD' , 104 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('BLOCKCHAIN' , 105 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('RL' , 106 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('DL' , 107 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('INTERVIEW PREP' , 108 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019) ,
('BIG DATA' , 109 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'SUDHANSHU',2020) ,
('DATA ANALYTICS' , 110 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FSDS' , 111 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('FSDA' , 112 , 'ML', "THIS IS ML COURSE" ,'2021-07-07',3540,'JALPA',2021) ,
('FABE' , 113 , 'ML', "THIS IS ML COURSE" ,'2022-07-07',3540,'JALPA',2022) ,
('JAVA' , 114 , 'ML', "THIS IS ML COURSE" ,'2020-07-07',3540,'JALPA',2020) ,
('MERN' , 115 , 'ML', "THIS IS ML COURSE" ,'2019-07-07',3540,'JALPA',2019); 

SELECT * FROM BIT_COURSES6;

SELECT PARTITION_NAME , TABLE_NAME , TABLE_ROWS FROM
INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_NAME = 'BIT_COURSES6'

SELECT * ,
CASE
	WHEN COURSE_NAME = 'FSDA' THEN SYSDATE()
    WHEN COURSE_NAME = 'FSDS' THEN SYSTEM_USER()
    ELSE "THIS IS NOT YOUR BATCH"
END AS STATEMENT
FROM BIT_COURSE;

SELECT * ,
CASE
	WHEN LENGTH(COURSE_NAME) = 4 THEN "LEN 4"
    WHEN LENGTH(COURSE_NAME) = 2 THEN "LEN 2"
    ELSE "OTHER LENGTH"
END AS STATEMENT
FROM BIT_COURSE;

UPDATE BIT_COURSE
SET COURSE_TITLE = 
CASE
	WHEN COURSE_TITLE = 'ML' THEN 'MACHINE LEARNING'
	ELSE 0
END;
SELECT * FROM BIT_COURSE;

SELECT * ,
CASE
	WHEN COURSE_LAUNCH_YEAR = '2019' THEN 'COURSE LAUNCH 2019'
    WHEN COURSE_LAUNCH_YEAR = '2020' THEN 'COURSE LAUNCH 2020'
    WHEN COURSE_LAUNCH_YEAR = '2021' THEN 'COURSE LAUNCH 2021'
    ELSE 0
END AS STATEMENT
FROM SALES1;

USE SALES;    
SELECT * FROM SALES1;

SELECT * ,
CASE
    WHEN SALES < 100 THEN "0 TO 100"
    WHEN SALES < 200 THEN "101 TO 200"
    WHEN SALES < 300 THEN "201 TO 300"
    WHEN SALES < 400 THEN "301 TO 400"
    WHEN SALES < 500 THEN "401 TO 500"
    WHEN SALES < 600 THEN "501 TO 600"
    WHEN SALES < 700 THEN "601 TO 700"
    WHEN SALES < 800 THEN "701 TO 800"
    WHEN SALES < 900 THEN "801 TO 900"
    WHEN SALES < 1000 THEN "901 TO 1000"
    ELSE 0
END AS STATEMENT
FROM SALES1;

DELIMITER $$
CREATE FUNCTION ADD_TO_COLUMN(A INT)
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE B INT;
    SET B = A + 20;
    RETURN B;
END $$

SELECT ADD_TO_COLUMN(15)

## TO CONVERT INTEGER TO STRING
SELECT QUANTITY , ADD_TO_COLUMN(QUANTITY) FROM SALES1

DELIMITER $$
CREATE FUNCTION FINAL_PROFITS(PROFIT INT , DISCOUNT INT)
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE FINAL_PROFIT INT;
SET FINAL_PROFIT = PROFIT - DISCOUNT ;
RETURN FINAL_PROFIT;
END $$

SELECT PROFIT, DISCOUNT , FINAL_PROFITS(PROFIT, DISCOUNT) FROM SALES1

DELIMITER $$
CREATE FUNCTION FINAL_PROFITS_REAL(PROFIT DECIMAL(20,4) ,
DISCOUNT DECIMAL(10,4) , SALES DECIMAL(10,4) )
RETURNS INT
DETERMINISTIC
BEGIN
DECLARE FINAL_PROFIT INT;
SET FINAL_PROFIT = PROFIT - SALES * DISCOUNT ;
RETURN FINAL_PROFIT;
END $$

SELECT PROFIT, DISCOUNT, SALES , FINAL_PROFITS_REAL(PROFIT, DISCOUNT, SALES) FROM SALES1

DELIMITER &&
CREATE FUNCTION MARK_SALES2(SALES INT)
RETURNS VARCHAR(30)
DETERMINISTIC
BEGIN
DECLARE FLAG_SALES VARCHAR(30);
IF SALES <= 100 THEN
	SET FLAG_SALES = "SUPER AFFORDABLE PROFIT";
ELSEIF SALES > 100 AND SALES < 300 THEN
	SET FLAG_SALES = "AFFORDABLE";
ELSEIF SALES > 300 AND SALES < 600 THEN
	SET FLAG_SALES = "MODERATE PRICE";
ELSE
	SET FLAG_SALES = "MODERATE PRICE";
END IF;
RETURN FLAG_SALES;
END &&

SELECT MARK_SALES2(100)

SELECT SALES , MARK_SALES2(SALES) FROM SALES1 ;

CREATE TABLE LOOP_TABLE(VAL INT)
## CREATE LOOP
DELIMITER $$
CREATE PROCEDURE INSERT_DATA()
BEGIN
SET @VAR = 10 ;
GENERATE_DATA : LOOP
INSERT INTO LOOP_TABLE VALUES (@VAR);
SET @VAR = @VAR + 1 ;
IF @VAR = 100 THEN
	LEAVE GENERATE_DATA;
END IF ;
END LOOP GENERATE_DATA;
END $$

CALL INSERT_DATA();

SELECT * FROM LOOP_TABLE


